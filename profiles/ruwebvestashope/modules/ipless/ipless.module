<?php

/**
 * @file
 * Adds the Less CSS compilation to Drupal.
 */

use Drupal\ipless\Ipless;
use Drupal\ipless\Form\IpLessSettingForm;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function ipless_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.ipless':
      $text = file_get_contents(__DIR__ . '/README.md');
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()
          ->get('markdown.settings')
          ->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_config_schema_info_alter().
 */
function ipless_config_schema_info_alter(&$definitions) {

  $definitions['system.performance']['mapping']['ipless'] = [
    'type' => 'mapping',
    'label' => 'iPless',
    'mapping' => [
      'enabled' => [
        'type' => 'bool',
        'label' => 'Enabled',
      ],
      'modedev' => [
        'type' => 'bool',
        'label' => 'Dev mode',
      ],
      'sourcemap' => [
        'type' => 'bool',
        'label' => 'Source map',
      ],
      'watch_mode' => [
        'type' => 'bool',
        'label' => 'Watch mode',
      ],
    ],
  ];

}

/**
 * Implements hook_cache_flush().
 */
function ipless_cache_flush() {
  /** @var Ipless $ipless */
  $ipless = \Drupal::service('ipless.base');

  // Flush all CSS files.
  $ipless->flushFiles();
  $ipless->askForRebuild();
}

/**
 * Implements hook_rebuild().
 */
function ipless_rebuild() {
  /** @var Ipless $ipless */
  $ipless = \Drupal::service('ipless.base');
  if ($ipless->isEnabled()) {
    $ipless->generateAllLibraries();
  }
}

/**
 * Implements hook_cache_flush().
 */
function ipless_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id !== 'system_performance_settings') {
    return;
  }

  // Mapping Form alter on object.
  $form_ipless = new IpLessSettingForm();
  $form_ipless->formAlter_system_performance_settings($form, $form_state);
}

/**
 * Implements hook_page_attachments().
 */
function ipless_page_attachments(array &$attachments) {
  /** @var \Drupal\ipless\Ipless $ipless */
  $ipless = \Drupal::service('ipless.base');
  if ($ipless->isWatchModeEnable()) {
    $attachments['#attached']['library'][] = 'ipless/ipless.watching';
  }
}

/**
 * Implements hook_library_info_alter().
 */
function ipless_library_info_alter(&$libraries, $extension) {
  // Look for the configuration of less to complete them.
  foreach ($libraries as $library => &$library_data) {

    foreach ($library_data as $key => &$data) {
      // If no Less continue.
      if ($key !== 'less') {
        continue;
      }

      foreach ($data as $group => &$files) {
        foreach ($files as $file_less => &$file_conf) {
          // Escape if the output is already configured.
          if (!empty($file_conf['output'])) {
            continue;
          }

          // Remove the old output from css configuration.
          if (!empty($file_conf['output']) && isset($libraries[$library]['css'][$group][$file_conf['output']])) {
            unset($libraries[$library]['css'][$group][$file_conf['output']]);
          }

          $file_parsed = pathinfo($file_less);
          $uri = "public://ipless/{$extension}-{$library}--{$file_parsed['filename']}.css";

          // Adds output to the less definition.
          $file_conf['output'] = $uri;

          // Adds the new generated file to css.
          $library_data['css'][$group][$uri] = $file_conf;
        }
      }
    }
  }
}
